/*
 * Copyright 2014, General Dynamics C4 Systems
 *
 * SPDX-License-Identifier: GPL-2.0-only
 */

#pragma once

#include <config.h>
#include <types.h>
#include <plat/machine.h>
#include <machine/registerset.h>
#include <hardware.h>

/* This symbol is generated by the linker and marks the last valid
 * address in the kernel's virtual region
 */
extern char ki_end[1];

/* When translating a physical address into an address accessible to the
 * kernel via virtual addressing we always use the mapping of the memory
 * into the physical memory window, even if the mapping originally
 * referred to a kernel virtual address. */
static inline void *CONST ptrFromPAddr(paddr_t paddr)
{
    if ((paddr < PADDR_BASE) || (paddr > PADDR_TOP))  {
        printf("ERROR: paddr %"SEL4_PRIx_word" outside"
               " [%"SEL4_PRIx_word"..%"SEL4_PRIx_word"]\n",
               paddr, (paddr_t)PADDR_BASE, (paddr_t)PADDR_TOP);
    }

    assert(paddr >= PADDR_BASE);
    assert(paddr <= PADDR_TOP); /* purposely include end */
    return (void *)PADDR_TO_PPTR(paddr);
}

/* When obtaining a physical address from a reference to any object in
 * the physical mapping window, this function must be used. */
static inline paddr_t CONST addrFromPPtr(const void *pptr)
{
    if (((paddr_t)pptr < PPTR_BASE) || ((paddr_t)pptr > PPTR_TOP))  {
        printf("ERROR: pptr %p outside [%p..%p]\n",
               pptr, (void *)PPTR_BASE, (void *)PPTR_TOP);
    }

    assert((uintptr_t)pptr >= PPTR_BASE);
    assert((uintptr_t)pptr <= PPTR_TOP); /* purposely include end */
    return PPTR_TO_PADDR(pptr);
}

/* When obtaining a physical address from a reference to an address from
 * the kernel ELF mapping, this function must be used. */
static inline paddr_t CONST addrFromKPPtr(const void *kpptr)
{
    assert((paddr_t)kpptr >= KERNEL_ELF_BASE);
    assert((paddr_t)kpptr <= (paddr_t)ki_end);
    return KPPTR_TO_PADDR((paddr_t)kpptr);
}

#define paddr_to_pptr(x)   ptrFromPAddr(x)
#define pptr_to_paddr(x)   addrFromPPtr(x)
#define kpptr_to_paddr(x)  addrFromKPPtr(x)

static inline region_t CONST paddr_to_pptr_reg(const p_region_t p_reg)
{
    return (region_t) {
        .start = (pptr_t)paddr_to_pptr(p_reg.start),
        .end   = (pptr_t)paddr_to_pptr(p_reg.end)
    };
}

static inline p_region_t CONST pptr_to_paddr_reg(const region_t pptr_reg)
{
    return (p_region_t) {
        .start = pptr_to_paddr((const void *)pptr_reg.start),
        .end   = pptr_to_paddr((const void *)pptr_reg.end),
    };
}


#include <mode/machine.h>
