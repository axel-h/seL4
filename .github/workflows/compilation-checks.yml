# Copyright 2020, Data61, CSIRO (ABN 41 687 119 230)
#
# SPDX-License-Identifier: BSD-2-Clause

# Compilation actions to run on pull requests

name: Compile

on:
  push:
    branches:
      - master
  pull_request:

# To reduce the load we cancel any older runs of this workflow for the current
# PR. Such runs exist, if there were new pushes to the PR's branch without
# waiting for the workflow to finish. As a side effect, pushing new commits now
# becomes a convenient way to cancel all the older runs, e.g. if they are stuck
# and would only be stopped by the timeout eventually.
# For deployment to the master branch, the workflow will run on each push, no
# skipping or cancellation will happen. This works, becuase the concurrency
# group uses "github.run_id", which is a unique number for every workflow run
# within the whole repository.
# Note that "${{ <cond> && <ret_true> || <ret_false> }}" is the designated
# github expression to emulate a ternary operator, where <ret_true> must be
# something that does not evaluate to 'false' so <ret_false> is returned always.
concurrency:
  group: ${{ github.workflow }}-${{ github.event_name }}-${{ github.event_name == 'pull_request' && github.event.number || github.run_id }}
  cancel-in-progress: ${{ github.event_name == 'pull_request' }}

jobs:
  standalone_kernel:
    name: kernel
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        # RISCV32 and IA32 are left out, as they have no verified config
        arch: [ARM, ARM_HYP, AARCH64, RISCV64, X64]
        compiler: [gcc, llvm]
    steps:
    - uses: actions/checkout@v4
    - uses: seL4/ci-actions/standalone-kernel@master
      with:
        ARCH: ${{ matrix.arch }}
        COMPILER: ${{ matrix.compiler }}
